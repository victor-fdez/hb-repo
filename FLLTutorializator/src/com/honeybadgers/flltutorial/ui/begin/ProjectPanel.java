/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.honeybadgers.flltutorial.ui.begin;

import com.honeybadgers.flltutorial.model.Tutorial;
import com.honeybadgers.flltutorial.ui.utilities.Blocked;
import com.honeybadgers.flltutorial.ui.utilities.PanelsScrollPane;
import java.awt.AlphaComposite;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import java.awt.event.MouseWheelEvent;
import java.awt.event.MouseWheelListener;
import javax.swing.DefaultListModel;
import javax.swing.JList;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.SwingUtilities;

/**
 *
 * @author chingaman
 */
public class ProjectPanel extends javax.swing.JPanel implements Blocked, MouseWheelListener{

    /**
     * Creates new form tutorialPanel
     */
    private Tutorial tutorial;
    private DefaultListModel membersListModel;
    private boolean blocked;
    public ProjectPanel(Tutorial projectBase) {
        initComponents();
        this.blocked = true;
        this.tutorial = projectBase;
        this.titleLabel.setText(projectBase.getProjectName());
        this.authorLabel.setText(projectBase.getTeamName());
        this.membersListModel = new DefaultListModel();
        
        //add all members
        for(String memberName : this.tutorial.getMembers())
        {
            this.membersListModel.addElement(memberName);
        }
        this.membersList.setModel(this.membersListModel);
        this.memberScrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        layeredPane = new javax.swing.JLayeredPane();
        tutorialContentPanel = new javax.swing.JPanel();
        titleLabel = new javax.swing.JLabel();
        authorLabel = new javax.swing.JLabel();
        memberScrollPane = new javax.swing.JScrollPane();
        membersList = new javax.swing.JList();
        beaconPanel = new javax.swing.JPanel(){
            @Override
            protected void paintComponent(Graphics g)
            {
                super.paintComponent(g);
                if(blocked)
                {
                    Rectangle rect = g.getClipBounds();

                    AlphaComposite alpha = AlphaComposite.SrcOver.derive(0.65f);
                    Graphics2D g2 = (Graphics2D)g;

                    g2.setComposite(alpha);
                    //later change to gradient
                    g2.setColor(Color.WHITE);
                    g2.fillRect(rect.x, rect.y, rect.width, rect.height);
                }
            }
        };

        layeredPane.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        layeredPane.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                tutorialPanelResized(evt);
            }
        });

        tutorialContentPanel.setBackground(new java.awt.Color(153, 153, 153));

        titleLabel.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        titleLabel.setText("project name");

        authorLabel.setText("by team name");

        membersList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        memberScrollPane.setViewportView(membersList);

        org.jdesktop.layout.GroupLayout tutorialContentPanelLayout = new org.jdesktop.layout.GroupLayout(tutorialContentPanel);
        tutorialContentPanel.setLayout(tutorialContentPanelLayout);
        tutorialContentPanelLayout.setHorizontalGroup(
            tutorialContentPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(tutorialContentPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(tutorialContentPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(memberScrollPane)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, tutorialContentPanelLayout.createSequentialGroup()
                        .add(0, 0, Short.MAX_VALUE)
                        .add(authorLabel))
                    .add(tutorialContentPanelLayout.createSequentialGroup()
                        .add(titleLabel)
                        .add(0, 308, Short.MAX_VALUE)))
                .addContainerGap())
        );
        tutorialContentPanelLayout.setVerticalGroup(
            tutorialContentPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(tutorialContentPanelLayout.createSequentialGroup()
                .add(12, 12, 12)
                .add(titleLabel)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(memberScrollPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 87, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(authorLabel)
                .addContainerGap())
        );

        tutorialContentPanel.setBounds(0, 0, 410, 150);
        layeredPane.add(tutorialContentPanel, javax.swing.JLayeredPane.DEFAULT_LAYER);

        beaconPanel.setBackground(new java.awt.Color(255, 153, 153));
        beaconPanel.setOpaque(false);

        org.jdesktop.layout.GroupLayout beaconPanelLayout = new org.jdesktop.layout.GroupLayout(beaconPanel);
        beaconPanel.setLayout(beaconPanelLayout);
        beaconPanelLayout.setHorizontalGroup(
            beaconPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 404, Short.MAX_VALUE)
        );
        beaconPanelLayout.setVerticalGroup(
            beaconPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 144, Short.MAX_VALUE)
        );

        beaconPanel.setBounds(0, 0, 404, 144);
        layeredPane.add(beaconPanel, javax.swing.JLayeredPane.DRAG_LAYER);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layeredPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 414, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layeredPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 156, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void tutorialPanelResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_tutorialPanelResized
        this.beaconPanel.setSize(layeredPane.getSize());
        this.tutorialContentPanel.setSize(layeredPane.getSize());
        this.tutorialContentPanel.revalidate();
        this.beaconPanel.revalidate();
    }//GEN-LAST:event_tutorialPanelResized

    public Component getBeacon()
    {
        return (Component)this.beaconPanel;
    }
    
    public static ProjectPanel getTutorialPanelFromBeacon(Component beacon)
    {
        if(beacon instanceof JPanel)
        {
            ProjectPanel tutorialPanel = (ProjectPanel)beacon.getParent().getParent();
            return tutorialPanel;
        }
        return null;
    }
    
    public static Tutorial getTutorialFromBeacon(Component beacon)
    {
        if(beacon instanceof JPanel)
        {
            ProjectPanel tutorialPanel = (ProjectPanel)beacon.getParent().getParent();
            return tutorialPanel.tutorial;
        }
        return null;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel authorLabel;
    private javax.swing.JPanel beaconPanel;
    private javax.swing.JLayeredPane layeredPane;
    private javax.swing.JScrollPane memberScrollPane;
    private javax.swing.JList membersList;
    private javax.swing.JLabel titleLabel;
    private javax.swing.JPanel tutorialContentPanel;
    // End of variables declaration//GEN-END:variables

    
    @Override
    public void setBlocked(boolean block) {
        if(!block)
        {
            //System.out.println("Viewport size"+this.memberScrollPane.getViewport().getViewSize());
            //System.out.println("Scroll Pane size"+this.memberScrollPane.getViewport().getSize());
            Dimension viewSize = this.memberScrollPane.getViewport().getViewSize();
            Dimension viewportSize = this.memberScrollPane.getViewport().getSize();
            if(viewSize.height > viewportSize.height)
            {
                //System.out.println("added listener");
                this.addMouseWheelListener(this);
            }
        }
        else
        {
            this.removeMouseWheelListener(this);
        }
        this.blocked = block;
        this.repaint();
    }

    @Override
    public void mouseWheelMoved(MouseWheelEvent e) {
        this.redispatch(e);
    }
    
    private void redispatch(MouseWheelEvent e) {
        Component comp = SwingUtilities.getDeepestComponentAt(this.tutorialContentPanel, e.getX(), e.getY());
        if(comp == null || !(comp instanceof JList))
        {
            if(comp != null)
            {
                //System.out.println("[[[[[recursing");
                while(comp != null && Component.class.isAssignableFrom(comp.getClass()))
                {
                    if(comp instanceof PanelsScrollPane)
                    {
                        e.setSource(comp);
                        comp.dispatchEvent(e);
                        return;
                    }
                    //System.out.println("-] "+comp);
                    comp = comp.getParent();
                }
                //System.out.println("]]]]]recursing");
            }
            return;
        }
        e.setSource(comp);
        comp.dispatchEvent(e);
        //System.out.println("-> redispatched event: "+e);
    }
}
